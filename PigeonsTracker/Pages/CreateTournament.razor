@page "/CreateTournament"
@inject IStringLocalizer<Language> Localizer
@inject IPigeonTrackingService TrackingService
@inject NavigationManager NavigationManager


<div class="d-flex flex-column flex-nowrap mt-3 w-100 animate__animated animate__fadeInRight">
    <MyPageTitle Text="@Localizer["CreateTournament"]"></MyPageTitle>
    <div class="mt-2">
        @* <label for="tournamentName" class="form-label w-100">@Localizer["TournamentName"]</label> *@
        @* <input type="text" class="form-control" id="tournamentName" placeholder="@Localizer["TournamentName"]" @bind="Tournament.Name"> *@
        <MudTextField @bind-Value="Tournament.Name" Label="@Localizer["TournamentName"]" Variant="Variant.Text" Required="true" RequiredError="Tournament is required!"></MudTextField>
        @* <label id="tournamentNameHelp" class="form-text text-muted helpText">@Localizer["HelpTournamentName"]</label> *@
    </div>

    <div class="row mt-3">
        <label for="start" class="col-2 col-form-label">@Localizer["TournamentStartDate"]</label>
        <div class="col-10">
            <input type="date" id="start" name="trip-start" class="form-control" placeholder="@Localizer["TournamentStartDate"]" @bind="StartFrom" min="2024-01-01" max="9999-12-31">
        </div>
    </div>

    <div class="row mt-3">
        <label for="end" class="col-2 col-form-label">@Localizer["TournamentEndDate"]</label>
        <div class="col-10">
            <input type="date" id="end" name="trip-end" class="form-control w-100" placeholder="@Localizer["TournamentEndDate"]" @bind="EndTo" min="2024-01-01" max="9999-12-31">
        </div>
    </div>

    @* <button type="submit" class="btn btn-primary primary-bg mt-3" @onclick="CreateTournamentInStorage">@Localizer["Submit"]</button> *@
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" OnClick="CreateTournamentInStorage">@Localizer["Submit"]</MudButton>
</div>


@code {
    [Inject] private Blazor.Analytics.IAnalytics Analytics { get; set; }
    private Tournament Tournament { get; set; }
    DateTime StartFrom { get; set; } = DateTime.Now;
    DateTime EndTo { get; set; } = DateTime.Now.AddDays(7);


    protected override void OnInitialized()
    {
        base.OnInitialized();

        Tournament = new Tournament
        {
            Id = IdGenerator.GetNewId(),
            CreatedAt = DateTime.Now
        };
    }

    private async Task CreateTournamentInStorage()
    {
        Tournament.StartsFrom = StartFrom;
        Tournament.EndTo = EndTo;
        await TrackingService.UpsertTournament(Tournament);
        Console.WriteLine("Tournament has been created");
        try
        {
            await Analytics.TrackEvent("CreateTournament", Tournament.Name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        NavigationManager.NavigateTo("/MyTournaments");
    }

}