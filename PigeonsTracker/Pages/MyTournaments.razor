@page "/MyTournaments"
@inject IStringLocalizer<Language> Localizer
@inject IPigeonTrackingService TrackingService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PagesBase>
    <MyPageTitle Text="@Localizer["MyTournaments"]"></MyPageTitle>

    <div class="d-flex flex-column overflow-y-scroll" style="height: calc(100vh - 200px) !important;">
        <MyTournamentVirtualCmp Tournaments="_tournaments" DeleteAction="DeleteTournament"></MyTournamentVirtualCmp>
    </div>
</PagesBase>

<MudFab Color="Color.Primary" Class="btnFloating animate__animated animate__slideInUp" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => NavigationManager.NavigateTo("/CreateTournament"))"/>

@code {
    private string _message = "Loading .... ";
    private List<Tournament> _tournaments = new List<Tournament>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadList();
    }

    private async Task LoadList()
    {
        _tournaments = await TrackingService.GetAllTournaments();
        if (_tournaments != null && _tournaments.Count > 0)
        {
            _tournaments = _tournaments.OrderByDescending(o => o.CreatedAt).ToList();
        }
        else
        {
            _message = @Localizer["NoRecords"];
        }

        StateHasChanged();
    }

    private async Task DeleteTournament(string id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirmation?", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await TrackingService.DeleteTournament(id);
            Snackbar.Add("Deleted", Severity.Success);
            await LoadList();
        }
    }

}