@page "/CreateTracking/{TournId}"
@using System.Globalization
@inject IStringLocalizer<Language> Localizer
@inject IPigeonTrackingService TrackingService
@inject NavigationManager NavigationManager
@inject AppState AppSate

<PagesBase>
    <MyVirtualScrollCmp>

        <div class="d-flex flex-column @(AppSate.IsLanguageUrdu() ? "rtl" : "")">
            <MyPageTitle Text="@Localizer["CreateTrackingRecord"]"></MyPageTitle>


            <MudTextField Margin="Margin.Normal" Label="@Localizer["RoofName"]" @bind-Value="_record.RoofName" Required="true"></MudTextField>

            <MudGrid>
                <MudItem xs="12" md="3">
                    @* <MudTextField InputType="InputType.Date" Label="@Localizer["FlyingStartDate"]" @bind-Value="StartDate" Format="dd/mm/yyyy"></MudTextField> *@
                    <MudDatePicker Label="@Localizer["FlyingStartDate"]" Editable="true" @bind-Date="_startDate" Mask="@(new DateMask("dd.MM.yyyy"))" DateFormat="dd.MM.yyyy" Required="true"/>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudTextField InputType="InputType.Time" Label="@Localizer["FlyingStartTime"]" @bind-Value="StartTime" Format="@_myTimeFormat" Required="true"></MudTextField>
                </MudItem>

                <MudItem xs="12" md="3">
                    <MudNumericField @bind-Value="_numberOfBirds" Label="@Localizer["TotalBirdsCount"]" Variant="Variant.Text" Min="0" Max="21"/>
                </MudItem>
                <MudItem xs="12" md="3" Class="d-flex align-center">
                    <MudSwitch @bind-Value="@_haveBabyBird" Color="Color.Primary" Label="@Localizer["BabyBird"]"/>
                </MudItem>
            </MudGrid>


            @if (_records != null)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="my-3">@Localizer["BirdsInformation"]</MudText>

                var recordsWithIndex = _records.Select((record, index) => new { record, index = index + 1 });

                foreach (var indexedRecord in recordsWithIndex)
                {
                    <MudGrid>
                        <MudItem xs="2" Class="d-flex align-center justify-center">
                            <div class="d-flex flex-row primary-bg text-white justify-content-center align-items-center rounded px-3 py-2 mt-1">@indexedRecord.index.ToString()</div>
                        </MudItem>
                        <MudItem xs="10" Class="d-flex align-center">
                            <MudTextField Label="@Localizer["BirdsName"]" @bind-Value="@indexedRecord.record.BirdName" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                    </MudGrid>
                }
            }

            @if (_record.BabyBird != null)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="my-3">@Localizer["BabyBird"]</MudText>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField Label="@Localizer["BabyBirdName"]" @bind-Value="@_record.BabyBird.BirdName" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                </MudGrid>
            }

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" OnClick="CreateTrackingRecords">@Localizer["Submit"]</MudButton>
        </div>
        @*<div class="d-flex flex-column w-100 @(AppSate.IsLanguageUrdu() ? "rtl" : "")">
            <div class="d-flex flex-row align-items-center">
                <MyPageTitle Text="@Localizer["CreateTrackingRecord"]"></MyPageTitle>
            </div>
            <div class="mt-3">
                <input type="text" class="form-control" id="roofName" placeholder="@Localizer["RoofName"]" @bind="_record.RoofName">
            </div>
            <div class="form-row my-1">
                <div class="col-md-4 my-2">
                    <label for="startDateTime" class="form-label fs-1 w-100">@Localizer["FlyingStartDate"]</label>
                    <input type="date" class="form-control" id="startDateTime" @bind="@StartDate" min="2021-01-01" max="9999-12-31">
                    <label id="startDateTimeHelp" class="form-text text-muted fs-0-5 px-2">@StartDate.ToString("dd MMMM yyyy", CultureInfo.CurrentCulture)</label>
                </div>
                <div class="col-md-4 my-2">
                    <label for="startTime" class="form-label fs-1 w-100">@Localizer["FlyingStartTime"]</label>
                    <input type="time" class="form-control" id="startTime" @bind="StartTime">
                    <label id="startTimeHelp" class="form-text text-muted fs-0-5 px-2">@StartTime.ToString("HH:mm:ss", CultureInfo.CurrentCulture)</label>
                </div>
                <div class="col-md-4 my-2">
                    <label for="birdsCount" class="form-label fs-1 w-100">@Localizer["TotalBirdsCount"]</label>
                    <input type="number" class="form-control" id="birdsCount" @bind="_numberOfBirds">
                </div>
            </div>

            @if (_records != null)
            {
                <div class="d-flex flex-column w-100 my-3">
                    <div class="py-2">
                        <h6 class="primary-color">@Localizer["BirdsInformation"]</h6>
                    </div>

                    @{ var i = 1; }
                    @foreach (var rec in _records)
                    {
                        <div class="row mb-2">
                            <div class="col-2 my-1">
                                <input type="text" disabled readonly class="form-control text-center primary-bg text-white" id="@i _1" value="@i">
                            </div>
                            <div class="col-10 my-1">
                                <input type="text" class="form-control" id="@i _2" maxlength="25" @bind="@rec.BirdName" placeholder="@Localizer["BirdsName"]">
                            </div>
                        </div>
                        i++;
                    }
                </div>
            }

            <button type="submit" class="btn primary-bg text-white ripple mb-3" @onclick="CreateTrackingRecords">@Localizer["Submit"]</button>
        </div>*@

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger my-3" role="alert">
                @((MarkupString)_errorMessage)
            </div>
        }
    </MyVirtualScrollCmp>
</PagesBase>

@code {

    [Parameter] public string TournId { get; set; }

    [Inject] private Blazor.Analytics.IAnalytics Analytics { get; set; }

    private readonly string _myTimeFormat = "HH:mm:ss";
    private int _numberOfBirds = 7;
    private DateTime? _startDate = DateTime.Today; //new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 05, 00, 00);
    private DateTime StartTime { get; set; } //new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 05, 00, 00);
    private PigeonsTrackingRecord _record;
    private PigeonTrackingRecord[] _records;
    private Tournament _tournament;
    private bool _isTrackingOnly = false;
    private string _errorMessage = null;
    private bool _haveBabyBird = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _record = new PigeonsTrackingRecord()
        {
            Id = IdGenerator.GetNewId(),
            CreatedAt = DateTime.Now
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (TournId.Equals("none"))
        {
            _record ??= new PigeonsTrackingRecord()
            {
                Id = IdGenerator.GetNewId(),
                CreatedAt = DateTime.Now
            };
            _isTrackingOnly = true;
            return;
        }

        _tournament = await TrackingService.GetTournament(TournId);
        if (_tournament == null)
        {
            NavigationManager.NavigateTo("/ViewTournament/" + TournId);
        }
        else
        {
            if (_tournament.TrackingRecords == null)
            {
                _tournament.TrackingRecords = new List<PigeonsTrackingRecord>();
                _record ??= new PigeonsTrackingRecord()
                {
                    Id = IdGenerator.GetNewId(),
                    CreatedAt = DateTime.Now
                };
            }
        }
    }

    private async Task CreateTrackingRecords()
    {
        if (_records == null)
        {
            _records = new PigeonTrackingRecord[_numberOfBirds];
            for (var i = 0; i < _numberOfBirds; i++)
            {
                _records[i] = new PigeonTrackingRecord();
            }

            if (_haveBabyBird)
            {
                _record.BabyBird = new PigeonTrackingRecord();
            }
        }
        else
        {
            try
            {
                _record ??= new PigeonsTrackingRecord()
                {
                    Id = IdGenerator.GetNewId(),
                    CreatedAt = DateTime.Now
                };

                var (year, month, day) = _startDate.GetSeparatedDate()!;
                var (hour, minutes, seconds) = StartTime.GetSeparatedTime();
                _record.StartTime = new DateTime(year, month, day, hour, minutes, seconds);
                foreach (var d in _records.Where(w => w.EndTime != null))
                {
                    if (d.EndTime == null)
                    {
                        continue;
                    }

                    var endTime = d.EndTime.Value;
                    d.EndTime = new DateTime(year, month, day, endTime.Hour, endTime.Minute, endTime.Second);
                }

                _record.Records = _records.ToList();

                _record = PigeonsTrackingRecordTimeCalculator.CalculateHours(_record);
                if (_isTrackingOnly)
                {
                    await TrackingService.UpsertTracking(_record);
                    NavigationManager.NavigateTo($"/ViewUpdateTrackingRecord/none/{_record.Id}");
                }

                _tournament.TrackingRecords.Add(_record);
                await TrackingService.UpsertTournament(_tournament);
                try
                {
                    await Analytics.TrackEvent("CreateTrackingRecord", _record);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }

                NavigationManager.NavigateTo($"/ViewUpdateTrackingRecord/{TournId}/{_record.Id}");
            }
            catch (Exception e)
            {
                _errorMessage = "<b>Error Saving. </b><br>";
                _errorMessage += e.Message;
                Console.Write(e);
            }
        }
    }

}