@page "/ViewTournament/{tournId}"
@inject IPigeonTrackingService TrackingService
@inject IStringLocalizer<Language> Localizer
@inject NavigationManager NavigationManager
@inject AppState AppSate


<div class="d-flex flex-column w-100 py-2 animate__animated animate__fadeInUpBig">

    @if (_tournament != null)
    {
        <h5> @_tournament.Name</h5>

        <div class="row @(AppSate.IsLanguageUrdu() ? "rtl" : "") m-0 text-muted w-100">
            <div class="col-sm-12 col-md-3 p-0">
                <div class="row">
                    <span class="col-6">@Localizer["TotalAverage"] :</span>
                    <span class="col-6">@_tournament.TrackingRecords?.Where(w => w.TotalFlyingTime != null).Sum(s => s.TotalFlyingTime.Value.TotalMinutes).FromMinutesToCustomFormat()</span>
                </div>
            </div>
            <div class="col-sm-12 col-md-3 p-0">
                <div class="row">
                    <span class="col-6">@Localizer["Start"] :</span>
                    <span class="col-6">@_tournament.StartsFrom.ToString("dd MMMM yyyy")</span>
                </div>
            </div>
            <div class="col-sm-12 col-md-3 p-0">
                <div class="row">
                    <span class="col-6">@Localizer["End"] :</span>
                    <span class="col-6">@_tournament.EndTo.ToString("dd MMMM yyyy")</span>
                </div>
            </div>
        </div>


        <div class="d-flex flex-column w-100 border-top mt-3 @(AppSate.IsLanguageUrdu() ? "rtl" : "")">
            @if (_tournament.TrackingRecords is not {Count: > 0 })
            {
                <pre class="text-wrap py-3">@Localizer["NoRecords"]</pre>
            }
            else
            {
                <div class="d-flex flex-column w-100">
                    @foreach (var rec in _tournament.TrackingRecords)
                    {
                        <div class="d-flex flex-row align-items-center w-100 border-bottom my-1 py-3 px-2 cursor-btn rounded flying-rec">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-stopwatch" viewBox="0 0 16 16">
                                <path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5V5.6z"/>
                                <path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64a.715.715 0 0 1 .012-.013l.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354a.512.512 0 0 1-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5zM8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3z"/>
                            </svg>
                            <div class="flex-grow-1" @onclick="() => NavigateToViewAndUpdate(rec.Id)">
                                <div class="d-flex flex-column w-100 mx-3">
                                    <div class="flying-day-title">@Localizer["FlyingDayRecord"]</div>
                                    <div class="pg-text-muted fs-0-5">@rec.RoofName</div>
                                    <div class="pg-text-muted fs-0-5">
                                        <span>@Localizer["TotalBirdsCount"] @rec.Records.Count</span>
                                    </div>
                                    <div class="pg-text-muted fs-0-5">
                                        <span>@Localizer["Start"]</span> @rec.StartTime.ToString("dd MMMM yyyy hh:mm tt")
                                    </div>
                                    @if (rec.TotalFlyingTime.HasValue)
                                    {
                                        <div class="pg-text-muted fs-0-5">
                                            <span>@Localizer["TotalAverage"] : @rec.TotalFlyingTime.Value.ToCustomFormat()</span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div>
                                <button class="btn pg-text-muted" @onclick="() => DeleteTrackingRecord(rec.Id)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <pre>Data not found</pre>
    }
</div>

<button type="button" class="btnAdd ripple btn primary-bg text-white shadow btn-circle btn-lg animate__animated animate__slideInUp" data-toggle="tooltip" data-placement="top" title="Add Item" @onclick="@(() => NavigationManager.NavigateTo("/CreateTracking/" + TournId))">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-lg" viewBox="0 0 16 16">
        <path d="M8 0a1 1 0 0 1 1 1v6h6a1 1 0 1 1 0 2H9v6a1 1 0 1 1-2 0V9H1a1 1 0 0 1 0-2h6V1a1 1 0 0 1 1-1z"/>
    </svg>
</button>


@code {

    [Parameter]
    public string TournId { get; set; }

    private Tournament _tournament;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        _tournament = await TrackingService.GetTournament(TournId);

        if (_tournament == null)
        {
            NavigationManager.NavigateTo($"/MyTournaments");
        }
    }

    private void NavigateToViewAndUpdate(string recId)
    {
        NavigationManager.NavigateTo($"/ViewUpdateTrackingRecord/{TournId}/{recId}");
    }

    private async Task DeleteTrackingRecord(string id)
    {
        var rec = _tournament.TrackingRecords.FirstOrDefault(f => f.Id == id);

        if (rec != null)
        {
            _tournament.TrackingRecords.Remove(rec);
            await TrackingService.UpsertTournament(_tournament);
            await LoadData();
        }
    }

}