@page "/Settings"
@inject SettingsService SettingsService
@inject ISnackbar Snackbar


<MyPageTitle Text="Settings"></MyPageTitle>

<EditForm Model="@_settingsModel" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12">
            <MudCard Elevation="0" Outlined="false">
                <MudCardContent>
                    <MudTextField Label="Loft Name" HelperText="Max. 8 characters"
                                  @bind-Value="_settingsModel.LoftName" For="@(() => _settingsModel.LoftName)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private SettingsModel _settingsModel = new SettingsModel();


    private async Task OnValidSubmit(EditContext context)
    {
        await SettingsService.UpsertSettings(_settingsModel);
        Snackbar.Add("Settings are saved!", Severity.Success);
        StateHasChanged();
    }

    protected override async  Task OnInitializedAsync()
    {
        var temp = await SettingsService.GetSettings();

        if (temp is not null)
        {
            _settingsModel = temp;
        }
    }

}