@using System.Globalization
@using MudBlazor.Utilities
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Language> Localizer
@inject NavigationManager Manager
@inject IDialogService DialogService
@inject AppState AppState
@inject ILocalStorageService Service

<MudThemeProvider Theme="_currentTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h6" @onclick='() => Manager.NavigateTo("/")' Class="cursor-btn">PigeonsTracker<sup class="version-sup">(v@(AppState.ApplicationVersion))</sup></MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" OnClick='() => Manager.NavigateTo("Login")' />
        <MudIconButton Icon="@Icons.Material.Filled.Language" Color="Color.Inherit" OnClick="OpenLanguageChangerCallback" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    @* Class="px-2" *@
    <MudMainContent >
        <MudContainer Class="px-2 pt-2">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@if (_installable)
{
    <div class="row justify-content-center">
        <div class="install-prompt col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3">
            <span>@Localizer["InstallThisApplication"]</span>
            <button class="installButton btn btn-primary" @onclick="@(() => InstallClicked())">Yes</button>
            <button class="cancelButton btn btn-danger" @onclick="@(()=>_installable=false)">No</button>
        </div>
    </div>
}


@code
{
    [Inject]
    private Blazor.Analytics.IAnalytics Analytics { get; set; }

    static bool _installable = false;
    static Action _onInstallable;
    bool _drawerOpen = false;
    private readonly string _currentCultureName = CultureInfo.CurrentCulture.Name;

    private MudTheme _currentTheme = new MudTheme()
    {
        Palette = new PaletteLight
        {
            AppbarBackground = "#38006d",
            Primary = new MudColor("#38006d")
        },
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily =  new[] { "Roboto", "Helvetica", "Arial", "sans-serif" }
            }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        AppState.IsMobile = await JSRuntime.InvokeAsync<bool>("isDevice");
        Manager.LocationChanged += (sender, args) => { _drawerOpen = false; };
        _onInstallable = () => InvokeAsync(StateHasChanged);
        ChangeLanguageInTheme();

        var userIdFromStorage = await Service.GetItemAsStringAsync("userId");
        var userId = userIdFromStorage ?? Guid.NewGuid().ToString("N");

        var globalConfigData = new Dictionary<string, object>
        {
            ["user_id"] = userId
        };
        var globalEventData = new Dictionary<string, object>
        {
            ["user_id"] = userId
        };

        await Analytics.ConfigureGlobalConfigData(globalConfigData);
        Analytics.ConfigureGlobalEventData(globalEventData);
        if (userIdFromStorage is null || string.IsNullOrWhiteSpace(userIdFromStorage))
        {
            await Service.SetItemAsStringAsync("userId", userId);
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        StateHasChanged();
    }

    [JSInvokable]
    public static Task PwaInstallable()
    {
        _installable = true;
        _onInstallable.Invoke();
        return Task.CompletedTask;
    }

    ValueTask InstallClicked()
    {
        _installable = false;
        return JSRuntime.InvokeVoidAsync("OnPwaInstallClick");
    }

    private void OpenLanguageChangerCallback()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullScreen = AppState.IsMobile };
        DialogService.Show<CultureSelectorCmp>("Language Change", options);
        AppState.OnLanguageChange += AppStateOnLanguageLanguageChange;
        //Manager.NavigateTo($"/LanguageChange?returnUrl={Manager.Uri}");
    }

    private void AppStateOnLanguageLanguageChange()
    {
        if (_currentCultureName == AppState.LanguageName) return;
        Service.SetItemAsStringAsync("BlazorCulture", AppState.LanguageName);
        Manager.NavigateTo($"{Manager.Uri}", forceLoad: true);
    }

    private void ChangeLanguageInTheme()
    {
        if (AppState.IsLanguageUrdu())
        {
            _currentTheme = new MudTheme()
            {
                Palette = new PaletteLight
                {
                    AppbarBackground = "#38006d",
                    Primary = new MudColor("#38006d")
                },
                Typography = new Typography()
                {
                    Default = new Default()
                    {
                        FontFamily = new[] { "Noto Sans Arabic", "sans-serif" }
                    }
                }
            };
            StateHasChanged();
        }
    }
}